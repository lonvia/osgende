#!/usr/bin/env python3
# This file is part of Osgende
# Copyright (C) 2011-15 Sarah Hoffmann
#
# This is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
"""
 CherryPi tile server for tile databases generated with osgende-mapgen.
"""

import os
import sys
from threading import Lock
from math import pi,exp,atan

import cherrypy
import mapnik

DEFAULT_TESTMAP="""\
<!DOCTYPE html>
<html>
<head>
    <title>Testmap - %(style)s</title>
    <link rel="stylesheet" href="%(leaflet_path)s/leaflet.css" />
</head>
<body >
    <div id="map" style="position: absolute; width: 99%%; height: 97%%"></div>

    <script src="%(leaflet_path)s/leaflet.js"></script>
    <script src="%(leaflet_path)s/leaflet-hash.js"></script>
    <script>
        var map = L.map('map').setView([47.3317, 8.5017], 13);
        var hash = new L.Hash(map);

        L.tileLayer('http://a.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
        }).addTo(map);
        L.tileLayer('%(script_name)s/%(style)s/{z}/{x}/{y}.png', {
            maxZoom: 18,
        }).addTo(map);
    </script>
</body>
</html>
"""

RAD_TO_DEG = 180/pi

class TileProjection:
    def __init__(self,levels=18):
        self.Bc = []
        self.Cc = []
        self.zc = []
        self.Ac = []
        c = 256
        for d in range(0,levels + 1):
            e = c/2;
            self.Bc.append(c/360.0)
            self.Cc.append(c/(2 * pi))
            self.zc.append((e,e))
            self.Ac.append(c)
            c *= 2

    def fromTileToLL(self, zoom, x, y):
         e = self.zc[zoom]
         f = (x*256.0 - e[0])/self.Bc[zoom]
         g = (y*256.0 - e[1])/-self.Cc[zoom]
         h = RAD_TO_DEG * ( 2 * atan(exp(g)) - 0.5 * pi)
         return (f,h)


def mk_tileid(zoom, x, y):
    """Create a unique 64 bit tile ID.
       Works up to zoom level 24."
    """
    return zoom + (x << 5) + (y << (5 + zoom))


class DummyCache(object):
    """ A tile cache that does not remember any tiles. 

        Useful when testing out a new style.
    """
    def __init__(self, config):
        pass

    def get(self, zoom, x, y, fmt):
        return None

    def set(self, zoom, x, y, fmt, image=None):
        pass


class PostgresCache(object):
    """ A cache that saves tiles in postgres.
    """

    def __init__(self, config):
        self.empty = dict()
        for fmt, fname in config['empty_tile'].items():
            with open(fname, 'rb') as myfile:
                self.empty[fmt] = myfile.read()

        self.max_zoom = config.get('max_zoom', 100)
        self.pg = __import__('psycopg2')
        self.dba = config['dba']

        self.cmd_get = "SELECT pixbuf FROM %s WHERE id=%%s" % config['table']
        self.cmd_check = "SELECT count(*) FROM %s WHERE id=%%s" % config['table']
        self.cmd_set = "UPDATE %s SET pixbuf=%%s WHERE id=%%s AND pixbuf is Null" % config['table']

    def get_db(self):
        if not hasattr(cherrypy.thread_data, 'db'):
            cherrypy.thread_data.cache_db = self.pg.connect(self.dba)
            # set into autocommit mode so that tiles still can be
            # read while the db is updated
            cherrypy.thread_data.cache_db.autocommit = True
            cherrypy.thread_data.cache_db.cursor().execute("SET synchronous_commit TO OFF")

        return cherrypy.thread_data.cache_db

    def get(self, zoom, x, y, fmt):
        c = self.get_db().cursor()
        if zoom > self.max_zoom:
            shift = zoom - self.max_zoom
            c.execute(self.cmd_check,
                      (mk_tileid(self.max_zoom, x >> shift, y >> shift), ))
            if c.fetchone()[0]:
                return None
        else:
            c.execute(self.cmd_get, (mk_tileid(zoom, x, y), ))
            if c.rowcount > 0:
                return c.fetchone()[0]

        return self.empty[fmt]

    def set(self, zoom, x, y, fmt, image=None):
        if zoom <= self.max_zoom:
            c = self.get_db().cursor()
            c.execute(self.cmd_set, (image, mk_tileid(zoom, x, y)))


class MapnikRenderer(object):

    def __init__(self, name, config, styleconfig):
        self.name = name
        # defaults
        self.config = dict({ 'formats' : [ 'png' ],
                        'tile_size' : (256, 256),
                        'max_zoom' : 18
                      })
        self.stylecfg = dict()
        # local configuration
        if config is not None:
            self.config.update(config)
        if styleconfig is not None:
            self.stylecfg.update(styleconfig)

        if self.config['source_type'] == 'xml':
            self.create_map = self._create_map_xml
        if self.config['source_type'] == 'python':
            self.python_map =__import__(self.config['source'])
            self.create_map = self._create_map_python

        m = mapnik.Map(*self.config['tile_size'])
        self.create_map(m)

        self.mproj = mapnik.Projection(m.srs)
        self.gproj = TileProjection(self.config['max_zoom'])

    def get_map(self):
        self.thread_map()
        return cherrypy.thread_data.mapnik_map[self.name]

    def thread_map(self):
        if not hasattr(cherrypy.thread_data, 'mapnik_map'):
            cherrypy.thread_data.mapnik_map = dict()

        if not self.name in cherrypy.thread_data.mapnik_map:
            m = mapnik.Map(*self.config['tile_size'])
            self.create_map(m)
            cherrypy.thread_data.mapnik_map[self.name] = m

    def _create_map_xml(self, mapnik_map):
        src = os.path.join(self.config['source'])
        mapnik.load_map(mapnik_map, src)

    def _create_map_python(self, mapnik_map):
        self.python_map.construct_map(mapnik_map, self.stylecfg)

    def split_url(self, zoom, x, y):
        ypt = y.find('.')
        if ypt < 0:
            return None
        tiletype = y[ypt+1:]
        if tiletype not in self.config['formats']:
            return None
        try:
            zoom = int(zoom)
            x = int(x)
            y = int(y[:ypt])
        except ValueError:
            return None

        if zoom > self.config['max_zoom']:
            return None

        return (zoom, x, y, tiletype)

    def render(self, zoom, x, y, fmt):
        p0 = self.gproj.fromTileToLL(zoom, x, y+1)
        p1 = self.gproj.fromTileToLL(zoom, x+1, y)

        c0 = self.mproj.forward(mapnik.Coord(p0[0],p0[1]))
        c1 = self.mproj.forward(mapnik.Coord(p1[0],p1[1]))

        bbox = mapnik.Box2d(c0.x, c0.y, c1.x, c1.y)
        im = mapnik.Image(256, 256)

        m = self.get_map()
        m.zoom_to_box(bbox)
        mapnik.render(m, im)

        return im.tostring('png256')


@cherrypy.popargs('zoom', 'x', 'y')
class TileServer(object):

    def __init__(self, style, script_name):
        self.cachecfg = dict({ 'type' : 'DummyCache'})
        self.style_name = style
        self.script_name = script_name

    def setup(self, app, config):
        if 'TILE_CACHE' in config:
            self.cachecfg.update(config['TILE_CACHE'])
        cacheclass = globals()[self.cachecfg['type']]
        self.cache = cacheclass(self.cachecfg)
        self.renderer = MapnikRenderer(self.style_name,
                                       config.get('RENDERER'),
                                       config.get('TILE_STYLE'))

    @cherrypy.expose
    def test_map(self):
        return DEFAULT_TESTMAP % { 'style' : self.style_name,
                                   'script_name' : self.script_name,
                                   'leaflet_path' : os.environ.get('LEAFLET_PATH', 'http://cdn.leafletjs.com/leaflet-0.7.5')}

    @cherrypy.expose
    @cherrypy.tools.response_headers(headers=[('Content-Type', 'image/png')])
    @cherrypy.tools.etags(autotags=True)
    @cherrypy.tools.expires(secs=10800, force=True)
    def index(self, zoom, x, y):
        tile_desc = self.renderer.split_url(zoom, x, y)
        if tile_desc is None:
            raise cherrypy.NotFound()

        tile = self.cache.get(*tile_desc)
        if tile is None:
            tile = self.renderer.render(*tile_desc)
            self.cache.set(*tile_desc, image=tile)

        return tile

def error_page(status, message, traceback, version):
    cherrypy.response.headers['Content-Type'] = 'text/plain'
    return 'Error %s\n\n%s\n' % (status. message)

def setup_sites(sites, script_name=''):
    for site in sites:
        try:
            __import__(site)
        except ImportError:
            print("Missing config for site '%s'. Skipping." % site)
            continue

        site_cfg = dict()
        for var in dir(sys.modules[site]):
            site_cfg[var] = getattr(sys.modules[site], var)

        basename = site.split('.')[-1]
        server = TileServer(basename, script_name)
        app = cherrypy.tree.mount(server,  script_name + '/' + basename)
        server.setup(app, site_cfg)
    # now disable trailing slash
    cherrypy.config.update({'tools.trailing_slash.on': False })

_setup_lock = Lock()
_setup_done = False

def application(environ, start_response):
    """ Handler for WSGI appications."""
    with _setup_lock:
        if not globals()['_setup_done']:
            setup_sites(environ['TILE_SITES'].split(','),
                        script_name=environ['SCRIPT_NAME'])
            cherrypy.config.update({'log.wsgi' : True,
                                    'log.screen' : False,
                                    'error_page.default': error_page})
            globals()['application'] = cherrypy.tree
            globals()['_setup_done'] = True
    return cherrypy.tree(environ, start_response)

if __name__ == '__main__':
    setup_sites(os.environ['TILE_SITES'].split(','))
    if 'MAPSERV_LISTEN' in os.environ:
        cherrypy.config.update({'server.socket_host' : os.environ['MAPSERV_LISTEN']})
    if 'MAPSERV_PORT' in os.environ:
        cherrypy.config.update({'server.socket_port' : int(os.environ['MAPSERV_PORT'])})
    cherrypy.engine.start()
    cherrypy.engine.block()
